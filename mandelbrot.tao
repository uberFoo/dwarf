struct Complex {
    re: float,
    im: float,
}

impl Complex {
    fn zero() -> Complex {
        Complex { re: 0.0, im: 0.0 }
    }

    fn one() -> Complex {
        Complex { re: 1.0, im: 0.0 }
    }

    fn add(self, other: Complex) -> Complex {
        Complex {
            re: self.re + other.re,
            im: self.im + other.im,
        }
    }

    fn add_2(self, other: Complex) {
        self.re = self.re + other.re;
        self.im = self.im + other.im;
    }

    fn square(self) -> Complex {
        Complex {
            re: self.re * self.re - self.im * self.im,
            im: 2.0 * self.re * self.im,
        }
    }

    fn square_2(self) {
        let re = self.re * self.re - self.im * self.im;
        self.im = 2.0 * self.re * self.im;
        self.re = re;
    }

    fn norm_squared(self) -> float {
        self.re * self.re + self.im * self.im
    }
}

fn pixel_to_point(
    width: int,
    height: int,
    pixel_x: int,
    pixel_y: int,
    upper_left: Complex,
    lower_right: Complex,
) -> Complex {
    let w = lower_right.re - upper_left.re;
    let h = upper_left.im - lower_right.im;
    Complex {
        re: upper_left.re + pixel_x as float * w / width as float,
        im: upper_left.im - pixel_y as float * h / height as float,
    }
}

fn escape_time(c: Complex, limit: int) -> int {
    // debugger;
    let z = Complex::zero();
    for i in 1..limit {
        // ğŸš§ This let wreaks havoc -- fix it.
        // Also the chained method calls don't affect the correct z, or something.
        // let z = z.square(z).add(z, c);
        ComplexEx::square(z);
        ComplexEx::add(z, c);
        // z = z.square();
        // z = z.add(c);
        // z.square_2();
        // z.add_2(c);
        // Having the RHS of this statement on the lhs of the expression below
        // does not work.
        let foo = ComplexEx::norm_squared(z);
        if foo > 4.0 {
        // if z.norm_squared() > 4.0 {
            // debugger;
            // return Some(i);
            return i;
        }
    }
    0
    // None
    // limit
}

fn main() {
    // if (((chacha::args()).len() as int) < 2) {
    //     print("Usage: mandelbrot <filename> <iterations>\n");
    //     return Complex::zero();
    // }

    let iterations = chacha::args()[1];
    print("iterations {1},  type is {0}\n".format(chacha::typeof(iterations), iterations));
    print("Total time: {0}s.\n".format(chacha::time(|| { plot(iterations); })));
}

fn plot(t: int) {
    let width = 7;
    let height = 2;
    let width = 21;
    let height = 5;
    let width = 42;
    let height = 10;
    let width = 84;
    let height = 20;
    let width = 168;
    let height = 40;
    let upper_left = Complex { re: -2.5, im: 1.0 };
    let lower_right = Complex { re: 2.0, im: -1.0 };
    // let upper_left = Complex {
    //     re: -0.750322,
    //     im: 0.031261,
    // };
    // let lower_right = Complex {
    //     re: -0.749291,
    //     im: 0.031852,
    // };
    // let upper_left = Complex {
    //     re: -0.34843774148008254,
    //     im: -0.6066922085831237,
    // };
    // let lower_right = Complex {
    //     re: -0.34821493420245574,
    //     im: -0.606586596104741,
    // };
    // let row = 0;
    // let column = 0;
    // debugger;
    // for t in 0..255 {
        // let t = 1024;
        for row in 0..height {
        // OMG, this is an ugly hack, and yet it's so badass. If it had worked. ğŸ˜¢
        // ChaCha::spawn(do_column, [row, width, height, upper_left, lower_right]);
        // if row > 1 {
        // debugger;
        // }
            do_column(t, row, width, height, upper_left, lower_right);
            // debugger;
        }
    // This is busted too.
    // print(chacha::eps() + "\n");
    // }
    print(chacha::eps());
    print("\n");
}

fn do_column(time: int, row: int, width: int, height: int, upper_left: Complex, lower_right: Complex) {
    for column in 0..width {
        let point = pixel_to_point(width, height, column, row, upper_left, lower_right);
        let time = escape_time(point, time);
        if time > 0 {
            print(" ");
        } else {
            print("*");
        }
    }
    print("\n");
}

use std::dwarf::Plugin;
use std::option::Option;
use std::result::Result;

struct HttpServer {
    // This plugin value must point to a valid plugin. The first part of the
    // path is the name, and the second part is a parameter to send to the
    // constructor.
    #[proxy(plugin = "http::http_server")]
    inner: Plugin<HttpServer>,
}

impl HttpServer {
    fn new() -> Self {
        HttpServer {
            inner: Plugin::<HttpServer>::new(),
        }
    }

    async fn serve(self, lambda: fn(string) -> string) -> Future<()> {
        self.inner
            .invoke_func("http_server", "HttpServer", "path", [lambda])
    }
}

use dwarf::Plugin;

enum Result<T, E> {
    Ok(T),
    Err(E),
}

enum Option<T> {
    Some(T),
    None,
}

struct HttpClient {
    #[proxy(plugin = "http_client")]
    inner: Plugin<http_client>,
}

impl HttpClient {
    fn new() -> Self {
        HttpClient {
            inner: Plugin::<http_client>::new(),
        }
    }
    // #[proxy(plugin = "http_client", object = "HttpClient", func = "get")]
    fn get(self, url: String) -> RequestBuillder {
        self.inner
            .invoke_func("http_client", "HttpClient", "get", vec![url])
    }
}

// #[proxy(ty = "RequestBuilder")]
struct RequestBuilder {
    #[plugin = "http_client"]
    inner: Plugin<http_client>,
}

// // This is just to keep the type checking happy.
// impl Request {
//     // This is a function that exists on the ObjectStore, and the interpreter
//     // will invoke it in the plugin.
//     #[proxy(store = "request", object = "Request", func = "send")]
//     async fn send(self) -> Future<Result<Request, Error>>;
// }

// #[store(model = "response")]
// struct Response {}

// // This is just to keep the type checking happy.
// #[store(model = "response")]
// impl Response {
//     // This is a function that exists on the ObjectStore, and the interpreter
//     // will invoke it in the plugin.
//     #[proxy(store = "response", object = "Response", func = "text")]
//     async fn text(self) -> Future<Result<String, Error>>;
// }

// #[store(model = "error")]
// struct Error {}

// // This is just to keep the type checking happy.
// #[store(model = "error")]
// impl Error {
//     // This is a function that exists on the ObjectStore, and the interpreter
//     // will invoke it in the plugin.
//     #[proxy(store = "error", object = "Error", func = "status")]
//     fn status(self) -> Option<int>;
// }

use std::option::Option;

struct Node<T> {
    value: T,
    next: Option<Node<T>>,
}

struct Foo<T, U, V> {
    a: T,
    b: U,
    c: V,
}

struct One<T> {
    uno: T,
}

fn main() {
    // let a = Node {
    //     value: 42,
    //     next: Option::<Node<int>>::None,
    // };
    // let b = Node {
    //     value: 69,
    //     next: Option::<Node<int>>::Some(a),
    // };
    // let c = Node {
    //     value: 420.0,
    //     next: Option::Some(b),
    // };

    // print("a = {0}\n".format(a));
    // print("b = {0}\n".format(b));
    // print("c = {0}\n".format(c));

    let d = Foo {
        a: 42,
        b: "hello",
        c: 3.14,
    };

    let a = Foo {
        c: "test",
        b: 3.14,
        a: true,
    };

    print(`d = ${d}\n`);
    print(`a = ${a}\n`);

    chacha::assert_eq(chacha::typeof(d.a), "int");
    chacha::assert_eq(chacha::typeof(d.b), "string");
    chacha::assert_eq(chacha::typeof(d.c), "float");

    let a = One { uno: 42 };
    print(`a = ${a}\n`);

    chacha::assert_eq(chacha::typeof(a.uno), "int");

    let b = One { uno: "hello" };
    print(`b = ${b}\n`);
    chacha::assert_eq(chacha::typeof(b.uno), "string");
}

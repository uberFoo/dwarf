// This is a generic function.
// It takes a type T and returns a value of type T + 42.
fn id<T>(x: T) -> T {
    x + 42
}

// This is a generic type.
// It takes a type T and stores a value of type T.
 struct Box<T> {
     value: T,
 }

 impl Box<T> {
     fn display(self) {
         print(`Box<${self.value}>\n`);
     }
 }

fn main() {
    // Here we call the generic function with an int.
    let x = id::<int>(54);
    print(`${x}\n`);
    chacha::assert(x == 96);

    // And here with a float.
    let y = id::<string>("Hello World, the answer is ");
    print(`${y}\n`);
    chacha::assert(y == "Hello World, the answer is 42");

    // Here we create a Box that stores a float.
    let z = Box{ value: 0.42 };
    z.display();
    chacha::assert(chacha::typeof(z.value) == "float");

    // Let's box a list now.
    let α = Box{ value: [1, 2, 3] };
    α.display();
    chacha::assert(chacha::typeof(α.value) == "[int]");

    // Let's try something interesting...
    let β = Box{ value: id::<string>("") };
    β.display();
    chacha::assert(chacha::typeof(β.value) == "string");
    chacha::assert(β.value == "42");
}
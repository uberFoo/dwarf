#[store(model = "sarzak")]
struct SarzakStore {}

#[store(model = "sarzak")]
impl SarzakStore {
    /// Inter (insert) [`Object`] into the store.
    ///
    #[proxy(model = "sarzak", object = "ObjectStore", func = "inter_object")]
    fn inter_object(self, object: Object);

    /// Exhume (get) [`Object`] from the store.
    ///
    #[proxy(model = "sarzak", object = "ObjectStore", func = "exhume_object")]
    fn exhume_object(self, id: Uuid) -> Option<Object>;

    /// Exhume [`Object`] id from the store by name.
    ///
    #[proxy(
        model = "sarzak",
        object = "ObjectStore",
        func = "exhume_object_id_by_name"
    )]
    fn exhume_object_id_by_name(self, name: string) -> Option<Uuid>;

    /// Get an iterator over the internal `HashMap<&Uuid, Object>`.
    ///
    #[proxy(model = "sarzak", object = "ObjectStore", func = "iter_object")]
    fn iter_object(self) -> [Object];
}

#[proxy(model = "sarzak", object = "Object")]
struct Object {
    id: Uuid,
    name: String,
    key_letters: String,
    description: String,
}

impl Object {
    #[proxy(model = "sarzak", object = "Object", func = "iter_object")]
    fn new(desc: string, kl: string, name: string) -> Self;
}

fn main() {
    // Specifying the type of the lhs forces a type check.
    let object: Object = Object {
        id: Uuid::new(),
        key_letters: "ᚠ",
        name: "Gandalf",
        description: "A wandering wizard",
    };

    // Object::new("A wizard", "ᚠ", "Gandalf", "A wandering wizard");
}

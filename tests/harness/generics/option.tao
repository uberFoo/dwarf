enum Option<T> {
    Some(T),
    None,
}

enum Simple {
    Foo,
    Bar,
    Baz,
}

fn main() {
    let a = Option::Some(42);
    // let a = Option::<int>::Some(42);
    // let b = Option::<int>::None;
    // let b: Option<int> = None;
    // let b: Option<int> = Option::<int>::None;
    let b: Option<int> = Option::None;
    let c = Option::Some("Hello world!");
    let d = Option::Some(69);
    let e = Option::<string>::None;

    let control = Simple::Baz;

    print("a = {0}\n".format(a));
    print("b = {0}\n".format(b));
    print("c = {0}\n".format(c));
    print("d = {0}\n".format(d));
    print("e = {0}\n".format(e));
    print("control = {0}\n".format(control));

    chacha::assert_eq(a, Option::Some(42));
    chacha::assert_eq(b, Option::<int>::None);
    chacha::assert_eq(c, Option::Some("Hello world!"));
    chacha::assert_eq(d, Option::Some(69));
    chacha::assert_eq(e, Option::<string>::None);
    chacha::assert_eq(control, Simple::Baz);

    // chacha::assert_eq(b != e);
}

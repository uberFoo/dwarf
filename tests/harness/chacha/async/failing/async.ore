async fn main() -> Future<()> {
    let ms = 10;

    // Linear, synchronous
    let time = chacha::time(|| {
        let answer = (0..42)
            .map(|i: int| -> int {
                chacha::sleep(ms);
                print("{0}.".format(i));
                1
            })
            .sum();
        print("\nThe answer to life, the universe, and everything is {0}.\n".format(answer));
    });

    chacha::assert(time > 0.420);
    print("Linear, synchronous solution took {0} seconds. Expected > 0.420.\n\n".format(time));

    // Linear, asynchronous
    let time = chacha::time(|| {
        let answer = (0..42)
            .map(|i: int| -> int {
                chacha::asleep(ms).await;
                print("{0}.".format(i));
                1
            })
            .sum();
        print("\nThe answer to life, the universe, and everything is {0}.\n".format(answer));
    });

    chacha::assert(time > 0.420);
    print("Linear, asynchronous solution took {0} seconds. Expected > 0.420.\n\n".format(time));

    // Two dimensional, asynchronous
    let time = chacha::time(|| {
        // ðŸš§ This is interesting, and requires implementing push for List.
        //
        // let answer = 0;
        // let sleepers = [];
        // for i in 0..42 {
        //     let sleeper = chacha::spawn(|| async {
        //         chacha::asleep(ms).await;
        //         print("{0},".format(i));
        //         answer = answer + 1;
        //     });
        //     sleepers.push(sleeper);
        // }
        // for i in 0..42 {
        //     sleepers[i].await;
        // }

        let answer = (0..42)
            .map(|i: int| -> Future<int> {
                // .map(|i: int| -> int {
                chacha::spawn(|| -> int {
                    chacha::asleep(ms).await;
                    print("{0},".format(i));
                    1
                })
            })
            // We need this trick to keep from blocking and executing these
            // serially.
            .map(|j: Future<int>| -> int { j.await })
            .sum();
        print("\nThe answer to life, the universe, and everything is {0}.\n".format(answer));
    });

    chacha::assert((time > 0.010) && (time < 0.420));
    print(
        "Two dimensional, asynchronous solution took {0} seconds. Expected > 0.010.\n".format(time),
    );
}

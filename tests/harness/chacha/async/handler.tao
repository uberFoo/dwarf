enum Event {
    On,
    Off,
}

enum Power {
    On,
    Off,
}

struct Color {
    red: float,
    green: float,
    blue: float,
}

struct Light {
    power: Power,
    color: Color,
}

impl Light {
    fn new() -> Light {
        Light {
            power: Power::Off,
            color: Color {
                red: 0.0,
                green: 0.0,
                blue: 0.0,
            },
        }
    }

    fn receive_event(self, event: Event) {
        match event {
            Event::On => {
                self.power = Power::On;
                self.color = Color {
                    red: 1.0,
                    green: 1.0,
                    blue: 1.0,
                };
            }
            Event::Off => {
                let a = Power::Off;
                self.power = a;
                self.color = Color {
                    red: 0.0,
                    green: 0.0,
                    blue: 0.0,
                };
            }
        };
    }
}

fn main() {
    let light = Light::new();
    chacha::assert_eq(light.power, Power::Off);
    chacha::assert_eq(light.color.red, 0.0);
    chacha::assert_eq(light.color.green, 0.0);
    chacha::assert_eq(light.color.blue, 0.0);

    let event = Event::On;
    light.receive_event(event);

    chacha::assert_eq(light.power, Power::On);
    chacha::assert_eq(light.color.red, 1.0);
    chacha::assert_eq(light.color.green, 1.0);
    chacha::assert_eq(light.color.blue, 1.0);
}

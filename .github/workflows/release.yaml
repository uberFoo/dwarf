name: Release
on:
    schedule:
        - cron: '0 0 * * *' # midnight UTC

    workflow_dispatch:

    push:
        branches:
            - master

env:
    CARGO_INCREMENTAL: 0
    CARGO_NET_RETRY: 10
    # RUSTFLAGS: "-D warnings -W unreachable-pub"
    RUSTUP_MAX_RETRIES: 10
    FETCH_DEPTH: 0 # pull in the tags for the version string
    MACOSX_DEPLOYMENT_TARGET: 10.15
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    # CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

jobs:
    dist:
        strategy:
            matrix:
                include:
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                    - os: windows-latest
                      target: i686-pc-windows-msvc
                    # - os: windows-latest
                    #   target: aarch64-pc-windows-msvc
                    # - os: ubuntu-20.04
                    #   target: x86_64-unknown-linux-gnu
                    #   container: ubuntu:18.04
                    # - os: ubuntu-20.04
                    #   target: aarch64-unknown-linux-gnu
                    # - os: ubuntu-20.04
                    #   target: arm-unknown-linux-gnueabihf
                    - os: macos-11
                      target: x86_64-apple-darwin
                    - os: macos-11
                      target: aarch64-apple-darwin

        name: dist (${{ matrix.target }})
        runs-on: ${{ matrix.os }}
        container: ${{ matrix.container }}

        env:
            RA_TARGET: ${{ matrix.target }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: ${{ env.FETCH_DEPTH }}

            - name: Install toolchain dependencies
              if: matrix.container == 'ubuntu:18.04'
              shell: bash
              run: |
                  apt-get update && apt-get install -y build-essential curl
                  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y
                  echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH

            - name: Install Rust toolchain
              run: |
                  rustup update --no-self-update stable
                  rustup target add ${{ matrix.target }}
                  # rustup component add rust-src

            - name: Update apt repositories
              if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'arm-unknown-linux-gnueabihf'
              run: |
                  sudo apt-get update

            - name: Install AArch64 target toolchain
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: sudo apt-get install gcc-aarch64-linux-gnu

            - name: Install ARM target toolchain
              if: matrix.target == 'arm-unknown-linux-gnueabihf'
              run: sudo apt-get install gcc-arm-linux-gnueabihf

            - name: Dist
              run: cargo xtask package --client-patch-version ${{ github.run_number }}

            - name: Run benchmarks
              if: matrix.target == 'x86_64-unknown-linux-gnu'
              run: cargo bench --features="single-vec repl" --no-default-features

            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: dist-${{ matrix.target }}
                  path: ./dist

    # dist-x86_64-unknown-linux-musl:
    #     name: dist (x86_64-unknown-linux-musl)
    #     runs-on: ubuntu-latest
    #     env:
    #         RA_TARGET: x86_64-unknown-linux-musl
    #         # For some reason `-crt-static` is not working for clang without lld
    #         RUSTFLAGS: '-C link-arg=-fuse-ld=lld -C target-feature=-crt-static'
    #     container:
    #         image: rust:alpine
    #         volumes:
    #             - /usr/local/cargo/registry:/usr/local/cargo/registry

    #     steps:
    #         - name: Install dependencies
    #           run: apk add --no-cache git clang lld musl-dev nodejs npm

    #         - name: Checkout repository
    #           uses: actions/checkout@v3
    #           with:
    #               fetch-depth: ${{ env.FETCH_DEPTH }}

    #         - name: Dist
    #           run: cargo xtask package --client-patch-version ${{ github.run_number }}

    #         - name: Upload artifacts
    #           uses: actions/upload-artifact@v1
    #           with:
    #               name: dist-x86_64-unknown-linux-musl
    #               path: ./dist

    publish:
        name: publish
        runs-on: ubuntu-latest
        # needs: ['dist', 'dist-x86_64-unknown-linux-musl']
        needs: ['dist']
        steps:
            - run: echo "TAG=$(date --iso -u)" >> $GITHUB_ENV
              if: github.ref == 'refs/heads/develop'
            - run: echo "TAG=nightly" >> $GITHUB_ENV
              if: github.ref != 'refs/heads/develop'
            - run: 'echo "TAG: $TAG"'

            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: ${{ env.FETCH_DEPTH }}

            - run: echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
            - run: 'echo "HEAD_SHA: $HEAD_SHA"'

            - uses: actions/download-artifact@v1
              with:
                  name: dist-aarch64-apple-darwin
                  path: dist
            - uses: actions/download-artifact@v1
              with:
                  name: dist-x86_64-apple-darwin
                  path: dist
            # - uses: actions/download-artifact@v1
            #   with:
            #       name: dist-x86_64-unknown-linux-gnu
            #       path: dist
            # - uses: actions/download-artifact@v1
            #   with:
            #       name: dist-x86_64-unknown-linux-musl
            #       path: dist
            # - uses: actions/download-artifact@v1
            #   with:
            #       name: dist-aarch64-unknown-linux-gnu
            #       path: dist
            # - uses: actions/download-artifact@v1
            #   with:
            #       name: dist-arm-unknown-linux-gnueabihf
            #       path: dist
            - uses: actions/download-artifact@v1
              with:
                  name: dist-x86_64-pc-windows-msvc
                  path: dist
            - uses: actions/download-artifact@v1
              with:
                  name: dist-i686-pc-windows-msvc
                  path: dist
            # - uses: actions/download-artifact@v1
            #   with:
            #       name: dist-aarch64-pc-windows-msvc
            #       path: dist
            - run: ls -al ./dist

            - name: Publish Release
              uses: ./.github/actions/github-release
              with:
                  files: 'dist/*'
                  name: ${{ env.TAG }}
                  token: ${{ secrets.GITHUB_TOKEN }}
